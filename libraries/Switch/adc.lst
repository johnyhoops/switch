   1               		.file	"adc.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  87               	init:
  88               		.stabd	46,0,0
   1:../libraries/Switch/adc.c **** #include <avr/io.h>
   2:../libraries/Switch/adc.c **** #include <avr/interrupt.h>
   3:../libraries/Switch/adc.c **** 
   4:../libraries/Switch/adc.c **** #include "bios.h"
   5:../libraries/Switch/adc.c **** #include "adc.h"
   6:../libraries/Switch/adc.c **** 
   7:../libraries/Switch/adc.c **** #define kHighThreshold 768
   8:../libraries/Switch/adc.c **** #define kLowThreshold 256
   9:../libraries/Switch/adc.c **** #define kCounterOffset 2
  10:../libraries/Switch/adc.c **** 
  11:../libraries/Switch/adc.c **** static volatile uint16_t adc_result[8] = {0};
  12:../libraries/Switch/adc.c **** static volatile uint8_t adc_channel = 0;
  13:../libraries/Switch/adc.c **** 
  14:../libraries/Switch/adc.c **** 
  15:../libraries/Switch/adc.c **** static void init(uint8_t reference)
  16:../libraries/Switch/adc.c **** {
  90               	.LM0:
  91               	.LFBB1:
  92               	/* prologue: function */
  93               	/* frame size = 0 */
  94               	/* stack size = 0 */
  95               	.L__stack_usage = 0
  17:../libraries/Switch/adc.c **** 	PORTC |= (1 << 2);					// turn on auxiliary power to VADC
  97               	.LM1:
  98 0000 AA9A      		sbi 0x15,2
  18:../libraries/Switch/adc.c **** 	DDRC |= (1 << 2);
 100               	.LM2:
 101 0002 A29A      		sbi 0x14,2
  19:../libraries/Switch/adc.c **** 
  20:../libraries/Switch/adc.c **** 	adc_channel = 0;
 103               	.LM3:
 104 0004 1092 0000 		sts adc_channel,__zero_reg__
  21:../libraries/Switch/adc.c **** 	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (0 << ADPS0) | (1 << ADIE);
 106               	.LM4:
 107 0008 8CE8      		ldi r24,lo8(-116)
 108 000a 86B9      		out 0x6,r24
  22:../libraries/Switch/adc.c **** 
  23:../libraries/Switch/adc.c **** 	ADMUX = adc_channel | (1 << REFS0);	// AVCC for AREF and ADCx
 110               	.LM5:
 111 000c 8091 0000 		lds r24,adc_channel
 112 0010 8064      		ori r24,lo8(64)
 113 0012 87B9      		out 0x7,r24
  24:../libraries/Switch/adc.c **** 	ADCSRA |= (1 << ADSC);				// start conversion
 115               	.LM6:
 116 0014 369A      		sbi 0x6,6
  25:../libraries/Switch/adc.c **** 
  26:../libraries/Switch/adc.c **** 	sei();	// enable interrupts
 118               	.LM7:
 119               	/* #APP */
 120               	 ;  26 "../libraries/Switch/adc.c" 1
 121 0016 7894      		sei
 122               	 ;  0 "" 2
 123               	/* #NOAPP */
 124               	.L2:
  27:../libraries/Switch/adc.c **** 
  28:../libraries/Switch/adc.c **** 	while(adc_channel == 0);			// wait for first conversions to complete
 126               	.LM8:
 127 0018 8091 0000 		lds r24,adc_channel
 128 001c 8823      		tst r24
 129 001e 01F0      		breq .L2
 130               	.L8:
  29:../libraries/Switch/adc.c **** 	while(adc_channel == 1);
 132               	.LM9:
 133 0020 8091 0000 		lds r24,adc_channel
 134 0024 8130      		cpi r24,lo8(1)
 135 0026 01F0      		breq .L8
 136               	/* epilogue start */
  30:../libraries/Switch/adc.c **** }
 138               	.LM10:
 139 0028 0895      		ret
 141               	.Lscope1:
 143               		.stabd	78,0,0
 147               	getValue:
 148               		.stabd	46,0,0
  31:../libraries/Switch/adc.c **** 
  32:../libraries/Switch/adc.c **** 
  33:../libraries/Switch/adc.c **** static int16_t getValue(uint8_t reference)
  34:../libraries/Switch/adc.c **** {
 150               	.LM11:
 151               	.LFBB2:
 152               	/* prologue: function */
 153               	/* frame size = 0 */
 154               	/* stack size = 0 */
 155               	.L__stack_usage = 0
  35:../libraries/Switch/adc.c **** 	uint8_t sreg;
  36:../libraries/Switch/adc.c **** 	int16_t value;
  37:../libraries/Switch/adc.c **** 
  38:../libraries/Switch/adc.c **** 	reference--;
 157               	.LM12:
 158 002a 8150      		subi r24,lo8(-(-1))
  39:../libraries/Switch/adc.c **** 	reference ^= 0x01;
  40:../libraries/Switch/adc.c **** 
  41:../libraries/Switch/adc.c **** 	sreg = SREG;
 160               	.LM13:
 161 002c 9FB7      		in r25,__SREG__
  42:../libraries/Switch/adc.c **** 	cli();
 163               	.LM14:
 164               	/* #APP */
 165               	 ;  42 "../libraries/Switch/adc.c" 1
 166 002e F894      		cli
 167               	 ;  0 "" 2
  39:../libraries/Switch/adc.c **** 	reference ^= 0x01;
 169               	.LM15:
 170               	/* #NOAPP */
 171 0030 21E0      		ldi r18,lo8(1)
 172 0032 8227      		eor r24,r18
  43:../libraries/Switch/adc.c **** 	value = adc_result[reference & 0x07];
 174               	.LM16:
 175 0034 8770      		andi r24,lo8(7)
 176 0036 E82F      		mov r30,r24
 177 0038 F0E0      		ldi r31,0
 178 003a EE0F      		lsl r30
 179 003c FF1F      		rol r31
 180 003e E050      		subi r30,lo8(-(adc_result))
 181 0040 F040      		sbci r31,hi8(-(adc_result))
 182 0042 2081      		ld r18,Z
 183 0044 3181      		ldd r19,Z+1
  44:../libraries/Switch/adc.c **** 	SREG = sreg;
 185               	.LM17:
 186 0046 9FBF      		out __SREG__,r25
  45:../libraries/Switch/adc.c **** 	return value;
  46:../libraries/Switch/adc.c **** }
 188               	.LM18:
 189 0048 C901      		movw r24,r18
 190 004a 0895      		ret
 195               	.Lscope2:
 197               		.stabd	78,0,0
 199               	.global	__vector_14
 201               	__vector_14:
 202               		.stabd	46,0,0
  47:../libraries/Switch/adc.c **** 
  48:../libraries/Switch/adc.c **** 
  49:../libraries/Switch/adc.c **** ISR(ADC_vect)
  50:../libraries/Switch/adc.c **** {
 204               	.LM19:
 205               	.LFBB3:
 206 004c 1F92      		push r1
 207 004e 0F92      		push r0
 208 0050 0FB6      		in r0,__SREG__
 209 0052 0F92      		push r0
 210 0054 1124      		clr __zero_reg__
 211 0056 2F93      		push r18
 212 0058 3F93      		push r19
 213 005a 8F93      		push r24
 214 005c 9F93      		push r25
 215 005e EF93      		push r30
 216 0060 FF93      		push r31
 217               	/* prologue: Signal */
 218               	/* frame size = 0 */
 219               	/* stack size = 9 */
 220               	.L__stack_usage = 9
  51:../libraries/Switch/adc.c **** 	static uint8_t seconds = 0;
  52:../libraries/Switch/adc.c **** 
  53:../libraries/Switch/adc.c **** 	volatile uint16_t* result = &adc_result[0];
  54:../libraries/Switch/adc.c **** 
  55:../libraries/Switch/adc.c **** 
  56:../libraries/Switch/adc.c **** 	if(adc_channel != 0){
 222               	.LM20:
 223 0062 8091 0000 		lds r24,adc_channel
 224 0066 8111      		cpse r24,__zero_reg__
 225 0068 00C0      		rjmp .L19
  53:../libraries/Switch/adc.c **** 	volatile uint16_t* result = &adc_result[0];
 227               	.LM21:
 228 006a E0E0      		ldi r30,lo8(adc_result)
 229 006c F0E0      		ldi r31,hi8(adc_result)
 230 006e 00C0      		rjmp .L15
 231               	.L19:
  57:../libraries/Switch/adc.c **** 		result++;
 233               	.LM22:
 234 0070 E0E0      		ldi r30,lo8(adc_result+2)
 235 0072 F0E0      		ldi r31,hi8(adc_result+2)
 236               	.L15:
  58:../libraries/Switch/adc.c **** 	}
  59:../libraries/Switch/adc.c **** 
  60:../libraries/Switch/adc.c **** 	*result = ADC;
 238               	.LM23:
 239 0074 84B1      		in r24,0x4
 240 0076 95B1      		in r25,0x4+1
 241 0078 9183      		std Z+1,r25
 242 007a 8083      		st Z,r24
  61:../libraries/Switch/adc.c **** 
  62:../libraries/Switch/adc.c **** 	if((*(result + 2) & 0x01) == 0){
 244               	.LM24:
 245 007c 8481      		ldd r24,Z+4
 246 007e 9581      		ldd r25,Z+5
 247 0080 80FD      		sbrc r24,0
 248 0082 00C0      		rjmp .L16
  63:../libraries/Switch/adc.c **** 		if(*result > kHighThreshold) (*(result + 2))++;
 250               	.LM25:
 251 0084 8081      		ld r24,Z
 252 0086 9181      		ldd r25,Z+1
 253 0088 8130      		cpi r24,1
 254 008a 9340      		sbci r25,3
 255 008c 00F0      		brlo .L17
 256 008e 00C0      		rjmp .L20
 257               	.L16:
  64:../libraries/Switch/adc.c **** 	} else {
  65:../libraries/Switch/adc.c **** 		if(*result < kLowThreshold) (*(result + 2))++;
 259               	.LM26:
 260 0090 8081      		ld r24,Z
 261 0092 9181      		ldd r25,Z+1
 262 0094 8F3F      		cpi r24,-1
 263 0096 9105      		cpc r25,__zero_reg__
 264 0098 01F0      		breq .+2
 265 009a 00F4      		brsh .L17
 266               	.L20:
 268               	.LM27:
 269 009c 8481      		ldd r24,Z+4
 270 009e 9581      		ldd r25,Z+5
 271 00a0 0196      		adiw r24,1
 272 00a2 9583      		std Z+5,r25
 273 00a4 8483      		std Z+4,r24
 274               	.L17:
  66:../libraries/Switch/adc.c **** 	}
  67:../libraries/Switch/adc.c **** 
  68:../libraries/Switch/adc.c **** 	if(seconds != bios_seconds){
 276               	.LM28:
 277 00a6 8091 0000 		lds r24,bios_seconds
 278 00aa 9091 0000 		lds r25,seconds.1448
 279 00ae 9817      		cp r25,r24
 280 00b0 01F0      		breq .L18
  69:../libraries/Switch/adc.c **** 		seconds = bios_seconds;
 282               	.LM29:
 283 00b2 8093 0000 		sts seconds.1448,r24
  70:../libraries/Switch/adc.c **** 		adc_result[4] = adc_result[2] - adc_result[6];
 285               	.LM30:
 286 00b6 8091 0000 		lds r24,adc_result+4
 287 00ba 9091 0000 		lds r25,adc_result+4+1
 288 00be 2091 0000 		lds r18,adc_result+12
 289 00c2 3091 0000 		lds r19,adc_result+12+1
 290 00c6 821B      		sub r24,r18
 291 00c8 930B      		sbc r25,r19
 292 00ca 9093 0000 		sts adc_result+8+1,r25
 293 00ce 8093 0000 		sts adc_result+8,r24
  71:../libraries/Switch/adc.c **** 		adc_result[5] = adc_result[3] - adc_result[7];
 295               	.LM31:
 296 00d2 8091 0000 		lds r24,adc_result+6
 297 00d6 9091 0000 		lds r25,adc_result+6+1
 298 00da 2091 0000 		lds r18,adc_result+14
 299 00de 3091 0000 		lds r19,adc_result+14+1
 300 00e2 821B      		sub r24,r18
 301 00e4 930B      		sbc r25,r19
 302 00e6 9093 0000 		sts adc_result+10+1,r25
 303 00ea 8093 0000 		sts adc_result+10,r24
  72:../libraries/Switch/adc.c **** 		adc_result[6] = adc_result[2];
 305               	.LM32:
 306 00ee 8091 0000 		lds r24,adc_result+4
 307 00f2 9091 0000 		lds r25,adc_result+4+1
 308 00f6 9093 0000 		sts adc_result+12+1,r25
 309 00fa 8093 0000 		sts adc_result+12,r24
  73:../libraries/Switch/adc.c **** 		adc_result[7] = adc_result[3];
 311               	.LM33:
 312 00fe 8091 0000 		lds r24,adc_result+6
 313 0102 9091 0000 		lds r25,adc_result+6+1
 314 0106 9093 0000 		sts adc_result+14+1,r25
 315 010a 8093 0000 		sts adc_result+14,r24
 316               	.L18:
  74:../libraries/Switch/adc.c **** 	}
  75:../libraries/Switch/adc.c **** 
  76:../libraries/Switch/adc.c **** 	adc_channel ^= 0x01;
 318               	.LM34:
 319 010e 8091 0000 		lds r24,adc_channel
 320 0112 91E0      		ldi r25,lo8(1)
 321 0114 8927      		eor r24,r25
 322 0116 8093 0000 		sts adc_channel,r24
  77:../libraries/Switch/adc.c **** 	ADMUX = adc_channel | (1 << REFS0); 		// AVCC for AREF and ADCx
 324               	.LM35:
 325 011a 8091 0000 		lds r24,adc_channel
 326 011e 8064      		ori r24,lo8(64)
 327 0120 87B9      		out 0x7,r24
  78:../libraries/Switch/adc.c **** 	ADCSRA |= (1 << ADSC);        				// start next conversion
 329               	.LM36:
 330 0122 369A      		sbi 0x6,6
 331               	/* epilogue start */
  79:../libraries/Switch/adc.c **** }
 333               	.LM37:
 334 0124 FF91      		pop r31
 335 0126 EF91      		pop r30
 336 0128 9F91      		pop r25
 337 012a 8F91      		pop r24
 338 012c 3F91      		pop r19
 339 012e 2F91      		pop r18
 340 0130 0F90      		pop r0
 341 0132 0FBE      		out __SREG__,r0
 342 0134 0F90      		pop r0
 343 0136 1F90      		pop r1
 344 0138 1895      		reti
 350               	.Lscope3:
 352               		.stabd	78,0,0
 354               	.global	adc
 356               	adc:
 357               		.stabd	46,0,0
  80:../libraries/Switch/adc.c **** 
  81:../libraries/Switch/adc.c **** 
  82:../libraries/Switch/adc.c **** HAL adcHAL = {
  83:../libraries/Switch/adc.c **** 	init,
  84:../libraries/Switch/adc.c **** 	0,
  85:../libraries/Switch/adc.c **** 	getValue,
  86:../libraries/Switch/adc.c **** 	0
  87:../libraries/Switch/adc.c **** };
  88:../libraries/Switch/adc.c **** 
  89:../libraries/Switch/adc.c **** 
  90:../libraries/Switch/adc.c **** HAL* adc(void)
  91:../libraries/Switch/adc.c **** {
 359               	.LM38:
 360               	.LFBB4:
 361               	/* prologue: function */
 362               	/* frame size = 0 */
 363               	/* stack size = 0 */
 364               	.L__stack_usage = 0
  92:../libraries/Switch/adc.c **** 	return &adcHAL;
  93:../libraries/Switch/adc.c **** }
 366               	.LM39:
 367 013a 80E0      		ldi r24,lo8(adcHAL)
 368 013c 90E0      		ldi r25,hi8(adcHAL)
 369 013e 0895      		ret
 371               	.Lscope4:
 373               		.stabd	78,0,0
 374               	.global	adcHAL
 375               		.section	.rodata
 378               	adcHAL:
 379 0000 0000      		.word	gs(init)
 380 0002 0000      		.word	0
 381 0004 0000      		.word	gs(getValue)
 382 0006 0000      		.word	0
 383               		.local	adc_channel
 384               		.comm	adc_channel,1,1
 385               		.local	adc_result
 386               		.comm	adc_result,16,1
 387               		.local	seconds.1448
 388               		.comm	seconds.1448,1,1
 392               		.text
 394               	.Letext0:
 395               		.ident	"GCC: (GNU) 4.7.2"
 396               	.global __do_copy_data
 397               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 adc.c
     /tmp/ccKBBSms.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccKBBSms.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccKBBSms.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccKBBSms.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccKBBSms.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccKBBSms.s:87     .text:0000000000000000 init
                             .bss:0000000000000000 adc_channel
     /tmp/ccKBBSms.s:147    .text:000000000000002a getValue
     /tmp/ccKBBSms.s:384    .bss:0000000000000001 adc_result
     /tmp/ccKBBSms.s:201    .text:000000000000004c __vector_14
     /tmp/ccKBBSms.s:386    .bss:0000000000000011 seconds.1448
     /tmp/ccKBBSms.s:356    .text:000000000000013a adc
     /tmp/ccKBBSms.s:378    .rodata:0000000000000000 adcHAL

UNDEFINED SYMBOLS
bios_seconds
__do_copy_data
__do_clear_bss
