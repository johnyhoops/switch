   1               	# 1 "../libraries/Switch/bios.S"
   1               	#include 	<avr/io.h>
   0               	
   1               	/* Copyright (c) 2002,2003,2005,2006,2007 Marek Michalkiewicz, Joerg Wunsch
   2               	   Copyright (c) 2007 Eric B. Weddington
   3               	   All rights reserved.
   4               	
   5               	   Redistribution and use in source and binary forms, with or without
   6               	   modification, are permitted provided that the following conditions are met:
   7               	
   8               	   * Redistributions of source code must retain the above copyright
   9               	     notice, this list of conditions and the following disclaimer.
  10               	
  11               	   * Redistributions in binary form must reproduce the above copyright
  12               	     notice, this list of conditions and the following disclaimer in
  13               	     the documentation and/or other materials provided with the
  14               	     distribution.
  15               	
  16               	   * Neither the name of the copyright holders nor the names of
  17               	     contributors may be used to endorse or promote products derived
  18               	     from this software without specific prior written permission.
  19               	
  20               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30               	  POSSIBILITY OF SUCH DAMAGE. */
  31               	
  32               	/* $Id: io.h 2211 2011-02-14 14:04:25Z aboyapati $ */
  33               	
  34               	/** \file */
  35               	/** \defgroup avr_io <avr/io.h>: AVR device-specific IO definitions
  36               	    \code #include <avr/io.h> \endcode
  37               	
  38               	    This header file includes the apropriate IO definitions for the
  39               	    device that has been specified by the <tt>-mmcu=</tt> compiler
  40               	    command-line switch.  This is done by diverting to the appropriate
  41               	    file <tt>&lt;avr/io</tt><em>XXXX</em><tt>.h&gt;</tt> which should
  42               	    never be included directly.  Some register names common to all
  43               	    AVR devices are defined directly within <tt>&lt;avr/common.h&gt;</tt>,
  44               	    which is included in <tt>&lt;avr/io.h&gt;</tt>,
  45               	    but most of the details come from the respective include file.
  46               	
  47               	    Note that this file always includes the following files:
  48               	    \code 
  49               	    #include <avr/sfr_defs.h>
  50               	    #include <avr/portpins.h>
  51               	    #include <avr/common.h>
  52               	    #include <avr/version.h>
  53               	    \endcode
  54               	    See \ref avr_sfr for more details about that header file.
  55               	
  56               	    Included are definitions of the IO register set and their
  57               	    respective bit values as specified in the Atmel documentation.
  58               	    Note that inconsistencies in naming conventions,
  59               	    so even identical functions sometimes get different names on
  60               	    different devices.
  61               	
  62               	    Also included are the specific names useable for interrupt
  63               	    function definitions as documented
  64               	    \ref avr_signames "here".
  65               	
  66               	    Finally, the following macros are defined:
  67               	
  68               	    - \b RAMEND
  69               	    <br>
  70               	    The last on-chip RAM address.
  71               	    <br>
  72               	    - \b XRAMEND
  73               	    <br>
  74               	    The last possible RAM location that is addressable. This is equal to 
  75               	    RAMEND for devices that do not allow for external RAM. For devices 
  76               	    that allow external RAM, this will be larger than RAMEND.
  77               	    <br>
  78               	    - \b E2END
  79               	    <br>
  80               	    The last EEPROM address.
  81               	    <br>
  82               	    - \b FLASHEND
  83               	    <br>
  84               	    The last byte address in the Flash program space.
  85               	    <br>
  86               	    - \b SPM_PAGESIZE
  87               	    <br>
  88               	    For devices with bootloader support, the flash pagesize
  89               	    (in bytes) to be used for the \c SPM instruction. 
  90               	    - \b E2PAGESIZE
  91               	    <br>
  92               	    The size of the EEPROM page.
  93               	    
  94               	*/
  95               	
  96               	#ifndef _AVR_IO_H_
  97               	#define _AVR_IO_H_
  98               	
  99               	#include <avr/sfr_defs.h>
   1               	/* Copyright (c) 2002, Marek Michalkiewicz <marekm@amelek.gda.pl>
 100               	
 101               	#if defined (__AVR_AT94K__)
 102               	#  include <avr/ioat94k.h>
 103               	#elif defined (__AVR_AT43USB320__)
 104               	#  include <avr/io43u32x.h>
 105               	#elif defined (__AVR_AT43USB355__)
 106               	#  include <avr/io43u35x.h>
 107               	#elif defined (__AVR_AT76C711__)
 108               	#  include <avr/io76c711.h>
 109               	#elif defined (__AVR_AT86RF401__)
 110               	#  include <avr/io86r401.h>
 111               	#elif defined (__AVR_AT90PWM1__)
 112               	#  include <avr/io90pwm1.h>
 113               	#elif defined (__AVR_AT90PWM2__)
 114               	#  include <avr/io90pwmx.h>
 115               	#elif defined (__AVR_AT90PWM2B__)
 116               	#  include <avr/io90pwm2b.h>
 117               	#elif defined (__AVR_AT90PWM3__)
 118               	#  include <avr/io90pwmx.h>
 119               	#elif defined (__AVR_AT90PWM3B__)
 120               	#  include <avr/io90pwm3b.h>
 121               	#elif defined (__AVR_AT90PWM216__)
 122               	#  include <avr/io90pwm216.h>
 123               	#elif defined (__AVR_AT90PWM316__)
 124               	#  include <avr/io90pwm316.h>
 125               	#elif defined (__AVR_AT90PWM81__)
 126               	#  include <avr/io90pwm81.h>
 127               	#elif defined (__AVR_ATmega8U2__)
 128               	#  include <avr/iom8u2.h>
 129               	#elif defined (__AVR_ATmega16M1__)
 130               	#  include <avr/iom16m1.h>
 131               	#elif defined (__AVR_ATmega16U2__)
 132               	#  include <avr/iom16u2.h>
 133               	#elif defined (__AVR_ATmega16U4__)
 134               	#  include <avr/iom16u4.h>
 135               	#elif defined (__AVR_ATmega32C1__)
 136               	#  include <avr/iom32c1.h>
 137               	#elif defined (__AVR_ATmega32M1__)
 138               	#  include <avr/iom32m1.h>
 139               	#elif defined (__AVR_ATmega32U2__)
 140               	#  include <avr/iom32u2.h>
 141               	#elif defined (__AVR_ATmega32U4__)
 142               	#  include <avr/iom32u4.h>
 143               	#elif defined (__AVR_ATmega32U6__)
 144               	#  include <avr/iom32u6.h>
 145               	#elif defined (__AVR_ATmega64C1__)
 146               	#  include <avr/iom64c1.h>
 147               	#elif defined (__AVR_ATmega64M1__)
 148               	#  include <avr/iom64m1.h>
 149               	#elif defined (__AVR_ATmega128__)
 150               	#  include <avr/iom128.h>
 151               	#elif defined (__AVR_ATmega1280__)
 152               	#  include <avr/iom1280.h>
 153               	#elif defined (__AVR_ATmega1281__)
 154               	#  include <avr/iom1281.h>
 155               	#elif defined (__AVR_ATmega1284P__)
 156               	#  include <avr/iom1284p.h>
 157               	#elif defined (__AVR_ATmega128RFA1__)
 158               	#  include <avr/iom128rfa1.h>
 159               	#elif defined (__AVR_ATmega2560__)
 160               	#  include <avr/iom2560.h>
 161               	#elif defined (__AVR_ATmega2561__)
 162               	#  include <avr/iom2561.h>
 163               	#elif defined (__AVR_AT90CAN32__)
 164               	#  include <avr/iocan32.h>
 165               	#elif defined (__AVR_AT90CAN64__)
 166               	#  include <avr/iocan64.h>
 167               	#elif defined (__AVR_AT90CAN128__)
 168               	#  include <avr/iocan128.h>
 169               	#elif defined (__AVR_AT90USB82__)
 170               	#  include <avr/iousb82.h>
 171               	#elif defined (__AVR_AT90USB162__)
 172               	#  include <avr/iousb162.h>
 173               	#elif defined (__AVR_AT90USB646__)
 174               	#  include <avr/iousb646.h>
 175               	#elif defined (__AVR_AT90USB647__)
 176               	#  include <avr/iousb647.h>
 177               	#elif defined (__AVR_AT90USB1286__)
 178               	#  include <avr/iousb1286.h>
 179               	#elif defined (__AVR_AT90USB1287__)
 180               	#  include <avr/iousb1287.h>
 181               	#elif defined (__AVR_ATmega64__)
 182               	#  include <avr/iom64.h>
 183               	#elif defined (__AVR_ATmega640__)
 184               	#  include <avr/iom640.h>
 185               	#elif defined (__AVR_ATmega644__) || defined (__AVR_ATmega644A__)
 186               	#  include <avr/iom644.h>
 187               	#elif defined (__AVR_ATmega644P__)
 188               	#  include <avr/iom644p.h>
 189               	#elif defined (__AVR_ATmega644PA__)
 190               	#  include <avr/iom644pa.h>
 191               	#elif defined (__AVR_ATmega645__) || defined (__AVR_ATmega645A__) || defined (__AVR_ATmega645P__)
 192               	#  include <avr/iom645.h>
 193               	#elif defined (__AVR_ATmega6450__) || defined (__AVR_ATmega6450A__) || defined (__AVR_ATmega6450P__
 194               	#  include <avr/iom6450.h>
 195               	#elif defined (__AVR_ATmega649__) || defined (__AVR_ATmega649A__)
 196               	#  include <avr/iom649.h>
 197               	#elif defined (__AVR_ATmega6490__) || defined (__AVR_ATmega6490A__) || defined (__AVR_ATmega6490P__
 198               	#  include <avr/iom6490.h>
 199               	#elif defined (__AVR_ATmega649P__)
 200               	#  include <avr/iom649p.h>
 201               	#elif defined (__AVR_ATmega64HVE__)
 202               	#  include <avr/iom64hve.h>
 203               	#elif defined (__AVR_ATmega103__)
 204               	#  include <avr/iom103.h>
 205               	#elif defined (__AVR_ATmega32__)
 206               	#  include <avr/iom32.h>
 207               	#elif defined (__AVR_ATmega323__)
 208               	#  include <avr/iom323.h>
 209               	#elif defined (__AVR_ATmega324P__) || defined (__AVR_ATmega324A__)
 210               	#  include <avr/iom324.h>
 211               	#elif defined (__AVR_ATmega324PA__)
 212               	#  include <avr/iom324pa.h>
 213               	#elif defined (__AVR_ATmega325__) || defined (__AVR_ATmega325A__)
 214               	#  include <avr/iom325.h>
 215               	#elif defined (__AVR_ATmega325P__)
 216               	#  include <avr/iom325.h>
 217               	#elif defined (__AVR_ATmega3250__) || defined (__AVR_ATmega3250A__)
 218               	#  include <avr/iom3250.h>
 219               	#elif defined (__AVR_ATmega3250P__)
 220               	#  include <avr/iom3250.h>
 221               	#elif defined (__AVR_ATmega328P__) || defined (__AVR_ATmega328__)
 222               	#  include <avr/iom328p.h>
 223               	#elif defined (__AVR_ATmega329__) || defined (__AVR_ATmega329A__)
 224               	#  include <avr/iom329.h>
 225               	#elif defined (__AVR_ATmega329P__) || defined (__AVR_ATmega329PA__)
 226               	#  include <avr/iom329.h>
 227               	#elif defined (__AVR_ATmega3290__) || defined (__AVR_ATmega3290A__)
 228               	#  include <avr/iom3290.h>
 229               	#elif defined (__AVR_ATmega3290P__)
 230               	#  include <avr/iom3290.h>
 231               	#elif defined (__AVR_ATmega32HVB__)
 232               	#  include <avr/iom32hvb.h>
 233               	#elif defined (__AVR_ATmega32HVBREVB__)
 234               	#  include <avr/iom32hvbrevb.h>
 235               	#elif defined (__AVR_ATmega406__)
 236               	#  include <avr/iom406.h>
 237               	#elif defined (__AVR_ATmega16__)
 238               	#  include <avr/iom16.h>
 239               	#elif defined (__AVR_ATmega16A__)
 240               	#  include <avr/iom16a.h>
 241               	#elif defined (__AVR_ATmega161__)
 242               	#  include <avr/iom161.h>
 243               	#elif defined (__AVR_ATmega162__)
 244               	#  include <avr/iom162.h>
 245               	#elif defined (__AVR_ATmega163__)
 246               	#  include <avr/iom163.h>
 247               	#elif defined (__AVR_ATmega164P__) || defined (__AVR_ATmega164A__)
 248               	#  include <avr/iom164.h>
 249               	#elif defined (__AVR_ATmega165__) || defined (__AVR_ATmega165A__)
 250               	#  include <avr/iom165.h>
 251               	#elif defined (__AVR_ATmega165P__)
 252               	#  include <avr/iom165p.h>
 253               	#elif defined (__AVR_ATmega168__) || defined (__AVR_ATmega168A__)
 254               	#  include <avr/iom168.h>
 255               	#elif defined (__AVR_ATmega168P__)
 256               	#  include <avr/iom168p.h>
 257               	#elif defined (__AVR_ATmega169__) || defined (__AVR_ATmega169A__)
 258               	#  include <avr/iom169.h>
 259               	#elif defined (__AVR_ATmega169P__)
 260               	#  include <avr/iom169p.h>
 261               	#elif defined (__AVR_ATmega169PA__)
 262               	#  include <avr/iom169pa.h>
 263               	#elif defined (__AVR_ATmega8HVA__)
 264               	#  include <avr/iom8hva.h>
 265               	#elif defined (__AVR_ATmega16HVA__)
 266               	#  include <avr/iom16hva.h>
 267               	#elif defined (__AVR_ATmega16HVA2__)
 268               	#  include <avr/iom16hva2.h>
 269               	#elif defined (__AVR_ATmega16HVB__)
 270               	#  include <avr/iom16hvb.h>
 271               	#elif defined (__AVR_ATmega16HVBREVB__)
 272               	#  include <avr/iom16hvbrevb.h>
 273               	#elif defined (__AVR_ATmega8__)
 274               	#  include <avr/iom8.h>
   1               	/* Copyright (c) 2002, Marek Michalkiewicz
   2               	   All rights reserved.
   3               	
   4               	   Redistribution and use in source and binary forms, with or without
   5               	   modification, are permitted provided that the following conditions are met:
   6               	
   7               	   * Redistributions of source code must retain the above copyright
   8               	     notice, this list of conditions and the following disclaimer.
   9               	
  10               	   * Redistributions in binary form must reproduce the above copyright
  11               	     notice, this list of conditions and the following disclaimer in
  12               	     the documentation and/or other materials provided with the
  13               	     distribution.
  14               	
  15               	   * Neither the name of the copyright holders nor the names of
  16               	     contributors may be used to endorse or promote products derived
  17               	     from this software without specific prior written permission.
  18               	
  19               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29               	  POSSIBILITY OF SUCH DAMAGE. */
  30               	
  31               	/* $Id: iom8.h 2235 2011-03-17 04:13:14Z arcanum $ */
  32               	
  33               	/* avr/iom8.h - definitions for ATmega8 */
  34               	
  35               	#ifndef _AVR_IOM8_H_
  36               	#define _AVR_IOM8_H_ 1
  37               	
  38               	/* This file should only be included from <avr/io.h>, never directly. */
  39               	
  40               	#ifndef _AVR_IO_H_
  41               	#  error "Include <avr/io.h> instead of this file."
  42               	#endif
  43               	
  44               	#ifndef _AVR_IOXXX_H_
  45               	#  define _AVR_IOXXX_H_ "iom8.h"
  46               	#else
  47               	#  error "Attempt to include more than one <avr/ioXXX.h> file."
  48               	#endif 
  49               	
  50               	/* I/O registers */
  51               	
  52               	/* TWI stands for "Two Wire Interface" or "TWI Was I2C(tm)" */
  53               	#define TWBR	_SFR_IO8(0x00)
  54               	#define TWSR	_SFR_IO8(0x01)
  55               	#define TWAR	_SFR_IO8(0x02)
  56               	#define TWDR	_SFR_IO8(0x03)
  57               	
  58               	/* ADC */
  59               	#define ADCW	_SFR_IO16(0x04)
  60               	#ifndef __ASSEMBLER__
  61               	#define ADC	_SFR_IO16(0x04)
  62               	#endif
  63               	#define ADCL	_SFR_IO8(0x04)
  64               	#define ADCH	_SFR_IO8(0x05)
  65               	#define ADCSR	_SFR_IO8(0x06)
  66               	#define ADCSRA	_SFR_IO8(0x06)  /* Changed in 2486H-AVR-09/02 */
  67               	#define ADMUX	_SFR_IO8(0x07)
  68               	
  69               	/* analog comparator */
  70               	#define ACSR	_SFR_IO8(0x08)
  71               	
  72               	/* USART */
  73               	#define UBRRL	_SFR_IO8(0x09)
  74               	#define UCSRB	_SFR_IO8(0x0A)
  75               	#define UCSRA	_SFR_IO8(0x0B)
  76               	#define UDR	_SFR_IO8(0x0C)
  77               	
  78               	/* SPI */
  79               	#define SPCR	_SFR_IO8(0x0D)
  80               	#define SPSR	_SFR_IO8(0x0E)
  81               	#define SPDR	_SFR_IO8(0x0F)
  82               	
  83               	/* Port D */
  84               	#define PIND	_SFR_IO8(0x10)
  85               	#define DDRD	_SFR_IO8(0x11)
  86               	#define PORTD	_SFR_IO8(0x12)
  87               	
  88               	/* Port C */
  89               	#define PINC	_SFR_IO8(0x13)
  90               	#define DDRC	_SFR_IO8(0x14)
  91               	#define PORTC	_SFR_IO8(0x15)
  92               	
  93               	/* Port B */
  94               	#define PINB	_SFR_IO8(0x16)
  95               	#define DDRB	_SFR_IO8(0x17)
  96               	#define PORTB	_SFR_IO8(0x18)
  97               	
  98               	/* EEPROM Control Register */
  99               	#define EECR	_SFR_IO8(0x1C)
 100               	
 101               	/* EEPROM Data Register */
 102               	#define EEDR	_SFR_IO8(0x1D)
 103               	
 104               	/* EEPROM Address Register */
 105               	#define EEAR	_SFR_IO16(0x1E)
 106               	#define EEARL	_SFR_IO8(0x1E)
 107               	#define EEARH	_SFR_IO8(0x1F)
 108               	
 109               	#define UCSRC	_SFR_IO8(0x20)
 110               	#define UBRRH	_SFR_IO8(0x20)
 111               	
 112               	#define WDTCR	_SFR_IO8(0x21)
 113               	#define ASSR	_SFR_IO8(0x22)
 114               	
 115               	/* Timer 2 */
 116               	#define OCR2	_SFR_IO8(0x23)
 117               	#define TCNT2	_SFR_IO8(0x24)
 118               	#define TCCR2	_SFR_IO8(0x25)
 119               	
 120               	/* Timer 1 */
 121               	#define ICR1	_SFR_IO16(0x26)
 122               	#define ICR1L	_SFR_IO8(0x26)
 123               	#define ICR1H	_SFR_IO8(0x27)
 124               	#define OCR1B	_SFR_IO16(0x28)
 125               	#define OCR1BL	_SFR_IO8(0x28)
 126               	#define OCR1BH	_SFR_IO8(0x29)
 127               	#define OCR1A	_SFR_IO16(0x2A)
 128               	#define OCR1AL	_SFR_IO8(0x2A)
 129               	#define OCR1AH	_SFR_IO8(0x2B)
 130               	#define TCNT1	_SFR_IO16(0x2C)
 131               	#define TCNT1L	_SFR_IO8(0x2C)
 132               	#define TCNT1H	_SFR_IO8(0x2D)
 133               	#define TCCR1B	_SFR_IO8(0x2E)
 134               	#define TCCR1A	_SFR_IO8(0x2F)
 135               	
 136               	#define SFIOR	_SFR_IO8(0x30)
 137               	
 138               	#define OSCCAL	_SFR_IO8(0x31)
 139               	
 140               	/* Timer 0 */
 141               	#define TCNT0	_SFR_IO8(0x32)
 142               	#define TCCR0	_SFR_IO8(0x33)
 143               	
 144               	#define MCUCSR	_SFR_IO8(0x34)
 145               	#define MCUSR   _SFR_IO8(0x34)  /* Defined as an alias for MCUCSR. */
 146               	
 147               	#define MCUCR	_SFR_IO8(0x35)
 148               	
 149               	#define TWCR	_SFR_IO8(0x36)
 150               	
 151               	#define SPMCR	_SFR_IO8(0x37)
 152               	
 153               	#define TIFR	_SFR_IO8(0x38)
 154               	#define TIMSK	_SFR_IO8(0x39)
 155               	
 156               	#define GIFR	_SFR_IO8(0x3A)
 157               	#define GIMSK	_SFR_IO8(0x3B)
 158               	#define GICR	_SFR_IO8(0x3B)   /* Changed in 2486H-AVR-09/02 */
 159               	
 160               	/* 0x3C reserved (OCR0?) */
 161               	
 162               	/* 0x3D..0x3E SP */
 163               	
 164               	/* 0x3F SREG */
 165               	
 166               	/* Interrupt vectors */
 167               	
 168               	/* External Interrupt Request 0 */
 169               	#define INT0_vect_num		1
 170               	#define INT0_vect			_VECTOR(1)
 171               	#define SIG_INTERRUPT0			_VECTOR(1)
 172               	
 173               	/* External Interrupt Request 1 */
 174               	#define INT1_vect_num		2
 175               	#define INT1_vect			_VECTOR(2)
 176               	#define SIG_INTERRUPT1			_VECTOR(2)
 177               	
 178               	/* Timer/Counter2 Compare Match */
 179               	#define TIMER2_COMP_vect_num	3
 180               	#define TIMER2_COMP_vect		_VECTOR(3)
 181               	#define SIG_OUTPUT_COMPARE2		_VECTOR(3)
 182               	
 183               	/* Timer/Counter2 Overflow */
 184               	#define TIMER2_OVF_vect_num		4
 185               	#define TIMER2_OVF_vect			_VECTOR(4)
 186               	#define SIG_OVERFLOW2			_VECTOR(4)
 187               	
 188               	/* Timer/Counter1 Capture Event */
 189               	#define TIMER1_CAPT_vect_num	5
 190               	#define TIMER1_CAPT_vect		_VECTOR(5)
 191               	#define SIG_INPUT_CAPTURE1		_VECTOR(5)
 192               	
 193               	/* Timer/Counter1 Compare Match A */
 194               	#define TIMER1_COMPA_vect_num	6
 195               	#define TIMER1_COMPA_vect		_VECTOR(6)
 196               	#define SIG_OUTPUT_COMPARE1A		_VECTOR(6)
 197               	
 198               	/* Timer/Counter1 Compare Match B */
 199               	#define TIMER1_COMPB_vect_num	7
 200               	#define TIMER1_COMPB_vect		_VECTOR(7)
 201               	#define SIG_OUTPUT_COMPARE1B		_VECTOR(7)
 202               	
 203               	/* Timer/Counter1 Overflow */
 204               	#define TIMER1_OVF_vect_num		8
 205               	#define TIMER1_OVF_vect			_VECTOR(8)
 206               	#define SIG_OVERFLOW1			_VECTOR(8)
 207               	
 208               	/* Timer/Counter0 Overflow */
 209               	#define TIMER0_OVF_vect_num		9
 210               	#define TIMER0_OVF_vect			_VECTOR(9)
 211               	#define SIG_OVERFLOW0			_VECTOR(9)
 212               	
 213               	/* Serial Transfer Complete */
 214               	#define SPI_STC_vect_num		10
 215               	#define SPI_STC_vect			_VECTOR(10)
 216               	#define SIG_SPI				_VECTOR(10)
 217               	
 218               	/* USART, Rx Complete */
 219               	#define USART_RXC_vect_num		11
 220               	#define USART_RXC_vect			_VECTOR(11)
 221               	#define SIG_UART_RECV			_VECTOR(11)
 222               	
 223               	/* USART Data Register Empty */
 224               	#define USART_UDRE_vect_num		12
 225               	#define USART_UDRE_vect			_VECTOR(12)
 226               	#define SIG_UART_DATA			_VECTOR(12)
 227               	
 228               	/* USART, Tx Complete */
 229               	#define USART_TXC_vect_num		13
 230               	#define USART_TXC_vect			_VECTOR(13)
 231               	#define SIG_UART_TRANS			_VECTOR(13)
 232               	
 233               	/* ADC Conversion Complete */
 234               	#define ADC_vect_num		14
 235               	#define ADC_vect			_VECTOR(14)
 236               	#define SIG_ADC				_VECTOR(14)
 237               	
 238               	/* EEPROM Ready */
 239               	#define EE_RDY_vect_num		15
 240               	#define EE_RDY_vect			_VECTOR(15)
 241               	#define SIG_EEPROM_READY		_VECTOR(15)
 242               	
 243               	/* Analog Comparator */
 244               	#define ANA_COMP_vect_num		16
 245               	#define ANA_COMP_vect			_VECTOR(16)
 246               	#define SIG_COMPARATOR			_VECTOR(16)
 247               	
 248               	/* 2-wire Serial Interface */
 249               	#define TWI_vect_num			17
 250               	#define TWI_vect			_VECTOR(17)
 251               	#define SIG_2WIRE_SERIAL		_VECTOR(17)
 252               	
 253               	/* Store Program Memory Ready */
 254               	#define SPM_RDY_vect_num		18
 255               	#define SPM_RDY_vect			_VECTOR(18)
 256               	#define SIG_SPM_READY			_VECTOR(18)
 257               	
 258               	#define _VECTORS_SIZE 38
 259               	
 260               	/* Bit numbers */
 261               	
 262               	/* GIMSK / GICR */
 263               	#define INT1	7
 264               	#define INT0	6
 265               	#define IVSEL	1
 266               	#define IVCE	0
 267               	
 268               	/* GIFR */
 269               	#define INTF1	7
 270               	#define INTF0	6
 271               	
 272               	/* TIMSK */
 273               	#define OCIE2	7
 274               	#define TOIE2	6
 275               	#define TICIE1	5
 276               	#define OCIE1A	4
 277               	#define OCIE1B	3
 278               	#define TOIE1	2
 279               	/* bit 1 reserved (OCIE0?) */
 280               	#define TOIE0	0
 281               	
 282               	/* TIFR */
 283               	#define OCF2	7
 284               	#define TOV2	6
 285               	#define ICF1	5
 286               	#define OCF1A	4
 287               	#define OCF1B	3
 288               	#define TOV1	2
 289               	/* bit 1 reserved (OCF0?) */
 290               	#define TOV0	0
 291               	
 292               	/* SPMCR */
 293               	#define SPMIE	7
 294               	#define RWWSB	6
 295               	/* bit 5 reserved */
 296               	#define RWWSRE	4
 297               	#define BLBSET	3
 298               	#define PGWRT	2
 299               	#define PGERS	1
 300               	#define SPMEN	0
 301               	
 302               	/* TWCR */
 303               	#define TWINT	7
 304               	#define TWEA	6
 305               	#define TWSTA	5
 306               	#define TWSTO	4
 307               	#define TWWC	3
 308               	#define TWEN	2
 309               	/* bit 1 reserved (TWI_TST?) */
 310               	#define TWIE	0
 311               	
 312               	/* TWAR */
 313               	#define TWA6    7
 314               	#define TWA5    6
 315               	#define TWA4    5
 316               	#define TWA3    4
 317               	#define TWA2    3
 318               	#define TWA1    2
 319               	#define TWA0    1
 320               	#define TWGCE	0
 321               	
 322               	/* TWSR */
 323               	#define TWS7	7
 324               	#define TWS6	6
 325               	#define TWS5	5
 326               	#define TWS4	4
 327               	#define TWS3	3
 328               	/* bit 2 reserved */
 329               	#define TWPS1	1
 330               	#define TWPS0	0
 331               	
 332               	/* MCUCR */
 333               	#define SE	7
 334               	#define SM2	6
 335               	#define SM1	5
 336               	#define SM0	4
 337               	#define ISC11	3
 338               	#define ISC10	2
 339               	#define ISC01	1
 340               	#define ISC00	0
 341               	
 342               	/* MCUCSR */
 343               	/* bits 7-4 reserved */
 344               	#define WDRF	3
 345               	#define BORF	2
 346               	#define EXTRF	1
 347               	#define PORF	0
 348               	
 349               	/* 
 350               	   The ADHSM bit has been removed from all documentation, 
 351               	   as being not needed at all since the comparator has proven 
 352               	   to be fast enough even without feeding it more power.
 353               	*/
 354               	
 355               	/* SFIOR */
 356               	/* bits 7-5 reserved */
 357               	#define ACME	3
 358               	#define PUD	2
 359               	#define PSR2	1
 360               	#define PSR10	0
 361               	
 362               	/* TCCR0 */
 363               	/* bits 7-3 reserved */
 364               	#define CS02	2
 365               	#define CS01	1
 366               	#define CS00	0
 367               	
 368               	/* TCCR2 */
 369               	#define FOC2	7
 370               	#define WGM20	6
 371               	#define COM21	5
 372               	#define COM20	4
 373               	#define WGM21	3
 374               	#define CS22	2
 375               	#define CS21	1
 376               	#define CS20	0
 377               	
 378               	/* ASSR */
 379               	/* bits 7-4 reserved */
 380               	#define AS2	3
 381               	#define TCN2UB	2
 382               	#define OCR2UB	1
 383               	#define TCR2UB	0
 384               	
 385               	/* TCCR1A */
 386               	#define COM1A1	7
 387               	#define COM1A0	6
 388               	#define COM1B1	5
 389               	#define COM1B0	4
 390               	#define FOC1A	3
 391               	#define FOC1B	2
 392               	#define WGM11	1
 393               	#define WGM10	0
 394               	
 395               	/* TCCR1B */
 396               	#define ICNC1	7
 397               	#define ICES1	6
 398               	/* bit 5 reserved */
 399               	#define WGM13	4
 400               	#define WGM12	3
 401               	#define CS12	2
 402               	#define CS11	1
 403               	#define CS10	0
 404               	
 405               	/* WDTCR */
 406               	/* bits 7-5 reserved */
 407               	#define WDCE	4
 408               	#define WDE	3
 409               	#define WDP2	2
 410               	#define WDP1	1
 411               	#define WDP0	0
 412               	
 413               	/* UBRRH */
 414               	#define URSEL	7
 415               	
 416               	/* UCSRC */
 417               	#define URSEL	7
 418               	#define UMSEL	6
 419               	#define UPM1	5
 420               	#define UPM0	4
 421               	#define USBS	3
 422               	#define UCSZ1	2
 423               	#define UCSZ0	1
 424               	#define UCPOL	0
 425               	
 426               	/* PORTB */
 427               	#define PB7	7
 428               	#define PB6	6
 429               	#define PB5	5
 430               	#define PB4	4
 431               	#define PB3	3
 432               	#define PB2	2
 433               	#define PB1	1
 434               	#define PB0	0
 435               	
 436               	/* DDRB */
 437               	#define DDB7	7
 438               	#define DDB6	6
 439               	#define DDB5	5
 440               	#define DDB4	4
 441               	#define DDB3	3
 442               	#define DDB2	2
 443               	#define DDB1	1
 444               	#define DDB0	0
 445               	
 446               	/* PINB */
 447               	#define PINB7	7
 448               	#define PINB6	6
 449               	#define PINB5	5
 450               	#define PINB4	4
 451               	#define PINB3	3
 452               	#define PINB2	2
 453               	#define PINB1	1
 454               	#define PINB0	0
 455               	
 456               	/* PORTC */
 457               	#define PC6	 6
 458               	#define PC5	 5
 459               	#define PC4	 4
 460               	#define PC3	 3
 461               	#define PC2	 2
 462               	#define PC1	 1
 463               	#define PC0	 0
 464               	
 465               	/* DDRC */
 466               	#define DDC6	6
 467               	#define DDC5	5
 468               	#define DDC4	4
 469               	#define DDC3	3
 470               	#define DDC2	2
 471               	#define DDC1	1
 472               	#define DDC0	0
 473               	
 474               	/* PINC */
 475               	#define PINC6	6
 476               	#define PINC5	5
 477               	#define PINC4	4
 478               	#define PINC3	3
 479               	#define PINC2	2
 480               	#define PINC1	1
 481               	#define PINC0	0
 482               	
 483               	/* PORTD */
 484               	#define PD7	 7
 485               	#define PD6	 6
 486               	#define PD5	 5
 487               	#define PD4	 4
 488               	#define PD3	 3
 489               	#define PD2	 2
 490               	#define PD1	 1
 491               	#define PD0	 0
 492               	
 493               	/* DDRD */
 494               	#define DDD7	7
 495               	#define DDD6	6
 496               	#define DDD5	5
 497               	#define DDD4	4
 498               	#define DDD3	3
 499               	#define DDD2	2
 500               	#define DDD1	1
 501               	#define DDD0	0
 502               	
 503               	/* PIND */
 504               	#define PIND7	7
 505               	#define PIND6	6
 506               	#define PIND5	5
 507               	#define PIND4	4
 508               	#define PIND3	3
 509               	#define PIND2	2
 510               	#define PIND1	1
 511               	#define PIND0	0
 512               	
 513               	/* SPSR */
 514               	#define SPIF	7
 515               	#define WCOL	6
 516               	#define SPI2X	0
 517               	
 518               	/* SPCR */
 519               	#define SPIE	7
 520               	#define SPE	6
 521               	#define DORD	5
 522               	#define MSTR	4
 523               	#define CPOL	3
 524               	#define CPHA	2
 525               	#define SPR1	1
 526               	#define SPR0	0
 527               	
 528               	/* UCSRA */
 529               	#define RXC	7
 530               	#define TXC	6
 531               	#define UDRE	5
 532               	#define FE	4
 533               	#define DOR	3
 534               	#define PE	2
 535               	#define U2X	1
 536               	#define MPCM	0
 537               	
 538               	/* UCSRB */
 539               	#define RXCIE	7
 540               	#define TXCIE	6
 541               	#define UDRIE	5
 542               	#define RXEN	4
 543               	#define	TXEN	3
 544               	#define UCSZ2	2
 545               	#define RXB8	1
 546               	#define TXB8	0
 547               	
 548               	/* ACSR */
 549               	#define ACD	7
 550               	#define ACBG	6
 551               	#define ACO	5
 552               	#define ACI	4
 553               	#define ACIE	3
 554               	#define ACIC	2
 555               	#define ACIS1	1
 556               	#define ACIS0	0
 557               	
 558               	/* ADCSR / ADCSRA */
 559               	#define ADEN	7
 560               	#define ADSC	6
 561               	#define ADFR	5
 562               	#define ADIF	4
 563               	#define ADIE	3
 564               	#define ADPS2	2
 565               	#define ADPS1	1
 566               	#define ADPS0	0
 567               	
 568               	/* ADMUX */
 569               	#define REFS1	7
 570               	#define REFS0	6
 571               	#define ADLAR	5
 572               	/* bit 4 reserved */
 573               	#define MUX3	3
 574               	#define MUX2	2
 575               	#define MUX1	1
 576               	#define MUX0	0
 577               	
 578               	/* EEPROM Control Register */
 579               	#define EERIE   3
 580               	#define EEMWE   2
 581               	#define EEWE    1
 582               	#define EERE    0
 583               	
 584               	/* Constants */
 585               	#define SPM_PAGESIZE 64
 586               	#define RAMSTART         (0x60)
 587               	#define RAMEND		 0x45F
 588               	#define XRAMEND		 RAMEND
 589               	#define E2END		 0x1FF
 590               	#define E2PAGESIZE   4
 591               	#define FLASHEND	 0x1FFF
 592               	
 593               	
 594               	/* Fuses */
 595               	
 596               	#define FUSE_MEMORY_SIZE 2
 597               	
 598               	/* Low Fuse Byte */
 599               	#define FUSE_CKSEL0      (unsigned char)~_BV(0)
 600               	#define FUSE_CKSEL1      (unsigned char)~_BV(1)
 601               	#define FUSE_CKSEL2      (unsigned char)~_BV(2)
 602               	#define FUSE_CKSEL3      (unsigned char)~_BV(3)
 603               	#define FUSE_SUT0        (unsigned char)~_BV(4)
 604               	#define FUSE_SUT1        (unsigned char)~_BV(5)
 605               	#define FUSE_BODEN       (unsigned char)~_BV(6)
 606               	#define FUSE_BODLEVEL    (unsigned char)~_BV(7)
 607               	#define LFUSE_DEFAULT (FUSE_SUT0 & FUSE_CKSEL3 & FUSE_CKSEL2 & FUSE_CKSEL1)
 608               	
 609               	/* High Fuse Byte */
 610               	#define FUSE_BOOTRST     (unsigned char)~_BV(0)
 611               	#define FUSE_BOOTSZ0     (unsigned char)~_BV(1)
 612               	#define FUSE_BOOTSZ1     (unsigned char)~_BV(2)
 613               	#define FUSE_EESAVE      (unsigned char)~_BV(3)
 614               	#define FUSE_CKOPT       (unsigned char)~_BV(4)
 615               	#define FUSE_SPIEN       (unsigned char)~_BV(5)
 616               	#define FUSE_WDTON       (unsigned char)~_BV(6)
 617               	#define FUSE_RSTDISBL    (unsigned char)~_BV(7)
 618               	#define HFUSE_DEFAULT (FUSE_SPIEN & FUSE_BOOTSZ1 & FUSE_BOOTSZ0)
 619               	
 620               	
 621               	/* Lock Bits */
 622               	#define __LOCK_BITS_EXIST
 623               	#define __BOOT_LOCK_BITS_0_EXIST
 624               	#define __BOOT_LOCK_BITS_1_EXIST 
 625               	
 626               	
 627               	/* Signature */
 628               	#define SIGNATURE_0 0x1E
 629               	#define SIGNATURE_1 0x93
 630               	#define SIGNATURE_2 0x07
 631               	
 632               	
 633               	/* Deprecated items */
 634               	#if !defined(__AVR_LIBC_DEPRECATED_ENABLE__)
 635               	
 636               	#pragma GCC system_header
 637               	
 638               	#pragma GCC poison SIG_INTERRUPT0
 639               	#pragma GCC poison SIG_INTERRUPT1
 640               	#pragma GCC poison SIG_OUTPUT_COMPARE2
 641               	#pragma GCC poison SIG_OVERFLOW2
 642               	#pragma GCC poison SIG_INPUT_CAPTURE1
 643               	#pragma GCC poison SIG_OUTPUT_COMPARE1A
 644               	#pragma GCC poison SIG_OUTPUT_COMPARE1B
 645               	#pragma GCC poison SIG_OVERFLOW1
 646               	#pragma GCC poison SIG_OVERFLOW0
 647               	#pragma GCC poison SIG_SPI
 648               	#pragma GCC poison SIG_UART_RECV
 649               	#pragma GCC poison SIG_UART_DATA
 650               	#pragma GCC poison SIG_UART_TRANS
 651               	#pragma GCC poison SIG_ADC
 652               	#pragma GCC poison SIG_EEPROM_READY
 653               	#pragma GCC poison SIG_COMPARATOR
 654               	#pragma GCC poison SIG_2WIRE_SERIAL
 655               	#pragma GCC poison SIG_SPM_READY
 656               	
 275               	#elif defined (__AVR_ATmega48__) || defined (__AVR_ATmega48A__)
 276               	#  include <avr/iom48.h>
 277               	#elif defined (__AVR_ATmega48P__)
 278               	#  include <avr/iom48p.h>
 279               	#elif defined (__AVR_ATmega88__) || defined (__AVR_ATmega88A__)
 280               	#  include <avr/iom88.h>
 281               	#elif defined (__AVR_ATmega88P__)
 282               	#  include <avr/iom88p.h>
 283               	#elif defined (__AVR_ATmega88PA__)
 284               	#  include <avr/iom88pa.h>
 285               	#elif defined (__AVR_ATmega8515__)
 286               	#  include <avr/iom8515.h>
 287               	#elif defined (__AVR_ATmega8535__)
 288               	#  include <avr/iom8535.h>
 289               	#elif defined (__AVR_AT90S8535__)
 290               	#  include <avr/io8535.h>
 291               	#elif defined (__AVR_AT90C8534__)
 292               	#  include <avr/io8534.h>
 293               	#elif defined (__AVR_AT90S8515__)
 294               	#  include <avr/io8515.h>
 295               	#elif defined (__AVR_AT90S4434__)
 296               	#  include <avr/io4434.h>
 297               	#elif defined (__AVR_AT90S4433__)
 298               	#  include <avr/io4433.h>
 299               	#elif defined (__AVR_AT90S4414__)
 300               	#  include <avr/io4414.h>
 301               	#elif defined (__AVR_ATtiny22__)
 302               	#  include <avr/iotn22.h>
 303               	#elif defined (__AVR_ATtiny26__)
 304               	#  include <avr/iotn26.h>
 305               	#elif defined (__AVR_AT90S2343__)
 306               	#  include <avr/io2343.h>
 307               	#elif defined (__AVR_AT90S2333__)
 308               	#  include <avr/io2333.h>
 309               	#elif defined (__AVR_AT90S2323__)
 310               	#  include <avr/io2323.h>
 311               	#elif defined (__AVR_AT90S2313__)
 312               	#  include <avr/io2313.h>
 313               	#elif defined (__AVR_ATtiny4__)
 314               	#  include <avr/iotn4.h>
 315               	#elif defined (__AVR_ATtiny5__)
 316               	#  include <avr/iotn5.h>
 317               	#elif defined (__AVR_ATtiny9__)
 318               	#  include <avr/iotn9.h>
 319               	#elif defined (__AVR_ATtiny10__)
 320               	#  include <avr/iotn10.h>
 321               	#elif defined (__AVR_ATtiny20__)
 322               	#  include <avr/iotn20.h>
 323               	#elif defined (__AVR_ATtiny40__)
 324               	#  include <avr/iotn40.h>
 325               	#elif defined (__AVR_ATtiny2313__)
 326               	#  include <avr/iotn2313.h>
 327               	#elif defined (__AVR_ATtiny2313A__)
 328               	#  include <avr/iotn2313a.h>
 329               	#elif defined (__AVR_ATtiny13__)
 330               	#  include <avr/iotn13.h>
 331               	#elif defined (__AVR_ATtiny13A__)
 332               	#  include <avr/iotn13a.h>
 333               	#elif defined (__AVR_ATtiny25__)
 334               	#  include <avr/iotn25.h>
 335               	#elif defined (__AVR_ATtiny4313__)
 336               	#  include <avr/iotn4313.h>
 337               	#elif defined (__AVR_ATtiny45__)
 338               	#  include <avr/iotn45.h>
 339               	#elif defined (__AVR_ATtiny85__)
 340               	#  include <avr/iotn85.h>
 341               	#elif defined (__AVR_ATtiny24__)
 342               	#  include <avr/iotn24.h>
 343               	#elif defined (__AVR_ATtiny24A__)
 344               	#  include <avr/iotn24a.h>
 345               	#elif defined (__AVR_ATtiny44__)
 346               	#  include <avr/iotn44.h>
 347               	#elif defined (__AVR_ATtiny44A__)
 348               	#  include <avr/iotn44a.h>
 349               	#elif defined (__AVR_ATtiny84__)
 350               	#  include <avr/iotn84.h>
 351               	#elif defined (__AVR_ATtiny84A__)
 352               	#  include <avr/iotn84a.h>  
 353               	#elif defined (__AVR_ATtiny261__)
 354               	#  include <avr/iotn261.h>
 355               	#elif defined (__AVR_ATtiny261A__)
 356               	#  include <avr/iotn261a.h>
 357               	#elif defined (__AVR_ATtiny461__)
 358               	#  include <avr/iotn461.h>
 359               	#elif defined (__AVR_ATtiny461A__)
 360               	#  include <avr/iotn461a.h>
 361               	#elif defined (__AVR_ATtiny861__)
 362               	#  include <avr/iotn861.h>
 363               	#elif defined (__AVR_ATtiny861A__)
 364               	#  include <avr/iotn861a.h>
 365               	#elif defined (__AVR_ATtiny43U__)
 366               	#  include <avr/iotn43u.h>
 367               	#elif defined (__AVR_ATtiny48__)
 368               	#  include <avr/iotn48.h>
 369               	#elif defined (__AVR_ATtiny88__)
 370               	#  include <avr/iotn88.h>
 371               	#elif defined (__AVR_ATtiny87__)
 372               	#  include <avr/iotn87.h>
 373               	#elif defined (__AVR_ATtiny167__)
 374               	#  include <avr/iotn167.h>
 375               	#elif defined (__AVR_AT90SCR100__)
 376               	#  include <avr/io90scr100.h>
 377               	#elif defined (__AVR_ATxmega16A4__)
 378               	#  include <avr/iox16a4.h>
 379               	#elif defined (__AVR_ATxmega16D4__)
 380               	#  include <avr/iox16d4.h>
 381               	#elif defined (__AVR_ATxmega32A4__)
 382               	#  include <avr/iox32a4.h>
 383               	#elif defined (__AVR_ATxmega32D4__)
 384               	#  include <avr/iox32d4.h>
 385               	#elif defined (__AVR_ATxmega64A1__)
 386               	#  include <avr/iox64a1.h>
 387               	#elif defined (__AVR_ATxmega64A1U__)
 388               	#  include <avr/iox64a1u.h>
 389               	#elif defined (__AVR_ATxmega64A3__)
 390               	#  include <avr/iox64a3.h>
 391               	#elif defined (__AVR_ATxmega64D3__)
 392               	#  include <avr/iox64d3.h>
 393               	#elif defined (__AVR_ATxmega128A1__)
 394               	#  include <avr/iox128a1.h>
 395               	#elif defined (__AVR_ATxmega128A1U__)
 396               	#  include <avr/iox128a1u.h>
 397               	#elif defined (__AVR_ATxmega128A3__)
 398               	#  include <avr/iox128a3.h>
 399               	#elif defined (__AVR_ATxmega128D3__)
 400               	#  include <avr/iox128d3.h>
 401               	#elif defined (__AVR_ATxmega192A3__)
 402               	#  include <avr/iox192a3.h>
 403               	#elif defined (__AVR_ATxmega192D3__)
 404               	#  include <avr/iox192d3.h>
 405               	#elif defined (__AVR_ATxmega256A3__)
 406               	#  include <avr/iox256a3.h>
 407               	#elif defined (__AVR_ATxmega256A3B__)
 408               	#  include <avr/iox256a3b.h>
 409               	#elif defined (__AVR_ATxmega256D3__)
 410               	#  include <avr/iox256d3.h>
 411               	#elif defined (__AVR_ATA6289__)
 412               	#  include <avr/ioa6289.h>
 413               	/* avr1: the following only supported for assembler programs */
 414               	#elif defined (__AVR_ATtiny28__)
 415               	#  include <avr/iotn28.h>
 416               	#elif defined (__AVR_AT90S1200__)
 417               	#  include <avr/io1200.h>
 418               	#elif defined (__AVR_ATtiny15__)
 419               	#  include <avr/iotn15.h>
 420               	#elif defined (__AVR_ATtiny12__)
 421               	#  include <avr/iotn12.h>
 422               	#elif defined (__AVR_ATtiny11__)
 423               	#  include <avr/iotn11.h>
 424               	#elif defined (__AVR_M3000__)
 425               	#  include <avr/iom3000.h>
 426               	#else
 427               	#  if !defined(__COMPILING_AVR_LIBC__)
 428               	#    warning "device type not defined"
 429               	#  endif
 430               	#endif
 431               	
 432               	#include <avr/portpins.h>
   1               	/* Copyright (c) 2003  Theodore A. Roth
 433               	
 434               	#include <avr/common.h>
   1               	/* Copyright (c) 2007 Eric B. Weddington
 435               	
 436               	#include <avr/version.h>
   1               	/* Copyright (c) 2005, Joerg Wunsch                               -*- c -*-
 437               	
 438               	/* Include fuse.h after individual IO header files. */
 439               	#include <avr/fuse.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 440               	
 441               	/* Include lock.h after individual IO header files. */
 442               	#include <avr/lock.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 443               	
   2               	
   3               	#define		TEMPL	r24
   4               	#define		TEMPH	r25
   5               	
   6               	#define		kShortPressTime	(64 / 16)
   7               	#define		kLongPressTime	(512 / 16)
   8               	#define		kRepeatTime	(128 / 16)
   9               	#define		kRepeatDelay	(1024 / 16)
  10               	
  11               	#define 	PORTBSEGMENTMASK ((1 << PB0) | (1 << PB3) | (1 << PB4) | (1 << PB5))
  12               	#define 	PORTDSEGMENTMASK ((1 << PD4) | (1 << PD5) | (1 << PD6) | (1 << PD7))
  13               	
  14               		.align	1
  15               		.lcomm 	bios_segment, 	8
  16               		.lcomm 	bios_seconds, 	1
  17               		.lcomm 	bios_minutes, 	1
  18               		.lcomm 	bios_hours, 	1
  19               		.lcomm 	bios_days, 		1
  20               		.lcomm	key,			4
  21               		.lcomm 	bios_ticks, 	1
  22               	
  23               	
  24               		.section .text
  25               	
  26               		.global bios_init
  27               		.global bios_segment
  28               		.global bios_ticks
  29               		.global bios_seconds
  30               		.global bios_minutes
  31               		.global bios_hours
  32               		.global bios_days
  33               		.global	bios_getKey
  34               		.global TIMER2_COMP_vect
  35               	
  36               	
  37               	bios_init:
  38:../libraries/Switch/bios.S **** 	ldi		TEMPL, (1 << AS2)
  39:../libraries/Switch/bios.S **** 	out		_SFR_IO_ADDR(ASSR), TEMPL		// select asynchronous operation of timer2 (32,768kHz)
  40               	
  41:../libraries/Switch/bios.S **** 	ldi		TEMPL, 127						// set timer2 compare value for divide by 128
  42:../libraries/Switch/bios.S **** 	out		_SFR_IO_ADDR(OCR2), TEMPL
  43               	
  44:../libraries/Switch/bios.S **** 	ldi		TEMPL, (1 << CS20) | (1 << WGM21)	// start timer2 with no prescaling in CTC mode
  45:../libraries/Switch/bios.S **** 	out		_SFR_IO_ADDR(TCCR2), TEMPL
  46               	
  47:../libraries/Switch/bios.S **** 	in		TEMPL, _SFR_IO_ADDR(TIFR)		// enable interrupts
  48:../libraries/Switch/bios.S **** 	ori		TEMPL, (1 << OCF2)
  49:../libraries/Switch/bios.S **** 	out		_SFR_IO_ADDR(TIFR), TEMPL
  50:../libraries/Switch/bios.S **** 	in		TEMPL, _SFR_IO_ADDR(TIMSK)
  51:../libraries/Switch/bios.S **** 	ori		TEMPL, (1 << OCIE2)
  52:../libraries/Switch/bios.S **** 	out		_SFR_IO_ADDR(TIMSK), TEMPL
  53:../libraries/Switch/bios.S **** 	sei
  54               		
  55:../libraries/Switch/bios.S **** 	sbi		_SFR_IO_ADDR(DDRB), 1			// enable outputs
  56:../libraries/Switch/bios.S **** 	sbi		_SFR_IO_ADDR(DDRB), 2
  57               		
  58:../libraries/Switch/bios.S **** 	sbi		_SFR_IO_ADDR(DDRC), 2			// enable aux power for analogue inputs
  59:../libraries/Switch/bios.S **** 	sbi		_SFR_IO_ADDR(PORTC), 2
  60               		
  61:../libraries/Switch/bios.S **** 	ret
  62               	
  63               	bios_getKey:
  64:../libraries/Switch/bios.S **** 	cli
  65:../libraries/Switch/bios.S **** 	lds		TEMPL, key
  66:../libraries/Switch/bios.S **** 	clr		TEMPH
  67:../libraries/Switch/bios.S **** 	sts		key, TEMPH
  68:../libraries/Switch/bios.S **** 	sei
  69:../libraries/Switch/bios.S **** 	ret
  70               	
  71               	
  72               	TIMER2_COMP_vect:
  73:../libraries/Switch/bios.S **** 	push	TEMPL
  74:../libraries/Switch/bios.S ****  	push	TEMPH
  75:../libraries/Switch/bios.S **** 	push	ZL
  76:../libraries/Switch/bios.S **** 	push	ZH
  77:../libraries/Switch/bios.S **** 	in		TEMPL, _SFR_IO_ADDR(SREG)
  78:../libraries/Switch/bios.S **** 	push	TEMPL
  79               	
  80               	periodicUpdate:
  81:../libraries/Switch/bios.S **** 	ldi		ZL, lo8(bios_segment)
  82:../libraries/Switch/bios.S **** 	ldi		ZH, hi8(bios_segment)
  83               	
  84               	
  85               	tickUpdate:
  86:../libraries/Switch/bios.S **** 	ldd		TEMPL, Z + 16
  87:../libraries/Switch/bios.S **** 	ldd		TEMPH, Z + 8
  88:../libraries/Switch/bios.S **** 	adiw	TEMPL, 1
  89:../libraries/Switch/bios.S **** 	std		Z + 16, TEMPL
  90               	seconds:	
  91:../libraries/Switch/bios.S **** 	std		Z + 8, TEMPH
  92:../libraries/Switch/bios.S **** 	cpi		TEMPH, 60
  93:../libraries/Switch/bios.S **** 	brne	displayUpdate
  94:../libraries/Switch/bios.S **** 	clr		TEMPH
  95:../libraries/Switch/bios.S **** 	std		Z + 8, TEMPH
  96               	minutes:	
  97:../libraries/Switch/bios.S **** 	ldd		TEMPH, Z + 9
  98:../libraries/Switch/bios.S **** 	inc		TEMPH
  99:../libraries/Switch/bios.S **** 	std		Z + 9, TEMPH
 100:../libraries/Switch/bios.S **** 	cpi		TEMPH, 60
 101:../libraries/Switch/bios.S **** 	brne	displayUpdate
 102:../libraries/Switch/bios.S **** 	clr		TEMPH
 103:../libraries/Switch/bios.S **** 	std		Z + 9, TEMPH
 104               	hours:
 105:../libraries/Switch/bios.S **** 	ldd		TEMPH, Z + 10
 106:../libraries/Switch/bios.S **** 	inc		TEMPH
 107:../libraries/Switch/bios.S **** 	std		Z + 10, TEMPH
 108:../libraries/Switch/bios.S **** 	cpi		TEMPH, 24
 109:../libraries/Switch/bios.S **** 	brne	displayUpdate
 110:../libraries/Switch/bios.S **** 	clr		TEMPH
 111:../libraries/Switch/bios.S **** 	std		Z + 10, TEMPH
 112               	days:	
 113:../libraries/Switch/bios.S **** 	ldd		TEMPH, Z + 11
 114:../libraries/Switch/bios.S **** 	inc		TEMPH
 115:../libraries/Switch/bios.S **** 	std		Z + 11, TEMPH
 116               	
 117               	displayUpdate:
 118:../libraries/Switch/bios.S **** 	ldd		TEMPH, Z + 16
 119:../libraries/Switch/bios.S **** 	sbrc	TEMPH, 1
 120:../libraries/Switch/bios.S **** 	rjmp	digitThree
 121               	
 122               	digitOne:
 123:../libraries/Switch/bios.S **** 	sbrc	TEMPH, 0
 124:../libraries/Switch/bios.S **** 	rjmp	digitTwo
 125               	
 126:../libraries/Switch/bios.S **** 	cbi		_SFR_IO_ADDR(PORTC), 3
 127               	
 128:../libraries/Switch/bios.S **** 	ldi 	TEMPL, 103
 129:../libraries/Switch/bios.S **** 	out 	_SFR_IO_ADDR(OCR2), TEMPL
 130               	
 131:../libraries/Switch/bios.S **** 	cbi		_SFR_IO_ADDR(DDRD), 2
 132:../libraries/Switch/bios.S **** 	cbi		_SFR_IO_ADDR(PORTD), 2
 133               	
 134:../libraries/Switch/bios.S **** 	rcall	clearSegments
 135               	
 136:../libraries/Switch/bios.S **** 	ldd		TEMPH, Z + 13
 137:../libraries/Switch/bios.S **** 	in		TEMPL, _SFR_IO_ADDR(PIND)
 138:../libraries/Switch/bios.S **** 	andi	TEMPL, (1 << PD2)
 139:../libraries/Switch/bios.S **** 	ori		TEMPL, (1 << 6)
 140:../libraries/Switch/bios.S **** 	rcall	debounce
 141:../libraries/Switch/bios.S **** 	std		Z + 13, TEMPH
 142               	
 143:../libraries/Switch/bios.S **** 	ldd		TEMPH, Z + 16
 144:../libraries/Switch/bios.S **** 	ldd		TEMPL, Z + 0
 145:../libraries/Switch/bios.S **** 	sbrc	TEMPH, 5
 146:../libraries/Switch/bios.S **** 	ldd		TEMPL, Z + 4
 147:../libraries/Switch/bios.S **** 	rcall	setSegments
 148               	
 149:../libraries/Switch/bios.S **** 	sbi		_SFR_IO_ADDR(PORTD), 2
 150:../libraries/Switch/bios.S **** 	sbi		_SFR_IO_ADDR(DDRD), 2
 151               	
 152:../libraries/Switch/bios.S **** 	rjmp	periodicUpdateDone
 153               	
 154               	digitTwo:
 155:../libraries/Switch/bios.S **** 	cbi		_SFR_IO_ADDR(PORTD), 2
 156               	
 157:../libraries/Switch/bios.S **** 	ldi 	TEMPL, 199
 158:../libraries/Switch/bios.S **** 	out 	_SFR_IO_ADDR(OCR2), TEMPL
 159               	
 160:../libraries/Switch/bios.S **** 	ldd		TEMPH, Z + 16
 161:../libraries/Switch/bios.S **** 	ldd		TEMPL, Z + 1
 162:../libraries/Switch/bios.S **** 	sbrc	TEMPH, 5
 163:../libraries/Switch/bios.S **** 	ldd		TEMPL, Z + 5
 164:../libraries/Switch/bios.S **** 	rcall	setSegments
 165               	
 166:../libraries/Switch/bios.S **** 	sbi		_SFR_IO_ADDR(PORTC), 6
 167:../libraries/Switch/bios.S **** 	sbi		_SFR_IO_ADDR(DDRC), 6
 168               	
 169:../libraries/Switch/bios.S **** 	rjmp	periodicUpdateDone
 170               	
 171               	digitThree:
 172:../libraries/Switch/bios.S **** 	sbrc	TEMPH, 0
 173:../libraries/Switch/bios.S **** 	rjmp	digitFour
 174               	
 175:../libraries/Switch/bios.S **** 	cbi		_SFR_IO_ADDR(PORTC), 6
 176               	
 177:../libraries/Switch/bios.S **** 	ldi 	TEMPL, 103
 178:../libraries/Switch/bios.S **** 	out 	_SFR_IO_ADDR(OCR2), TEMPL
 179               	
 180:../libraries/Switch/bios.S **** 	cbi		_SFR_IO_ADDR(DDRD), 3
 181:../libraries/Switch/bios.S **** 	cbi		_SFR_IO_ADDR(PORTD), 3
 182               	
 183:../libraries/Switch/bios.S **** 	rcall	clearSegments
 184               	
 185:../libraries/Switch/bios.S **** 	ldd		TEMPH, Z + 14
 186:../libraries/Switch/bios.S **** 	in		TEMPL, _SFR_IO_ADDR(PIND)
 187:../libraries/Switch/bios.S **** 	andi	TEMPL, (1 << PD3)
 188:../libraries/Switch/bios.S **** 	ori		TEMPL, (1 << 7)
 189:../libraries/Switch/bios.S **** 	rcall	debounce
 190:../libraries/Switch/bios.S **** 	std		Z + 14, TEMPH
 191               	
 192:../libraries/Switch/bios.S **** 	ldd		TEMPH, Z + 16
 193:../libraries/Switch/bios.S **** 	ldd		TEMPL, Z + 2
 194:../libraries/Switch/bios.S **** 	sbrc	TEMPH, 5
 195:../libraries/Switch/bios.S **** 	ldd		TEMPL, Z + 6
 196:../libraries/Switch/bios.S **** 	rcall	setSegments
 197               	
 198:../libraries/Switch/bios.S **** 	sbi		_SFR_IO_ADDR(PORTD), 3
 199:../libraries/Switch/bios.S **** 	sbi		_SFR_IO_ADDR(DDRD), 3
 200               	
 201:../libraries/Switch/bios.S **** 	rjmp	periodicUpdateDone
 202               	
 203               	digitFour:
 204:../libraries/Switch/bios.S **** 	cbi		_SFR_IO_ADDR(PORTD), 3
 205               	
 206:../libraries/Switch/bios.S **** 	ldi 	TEMPL, 103
 207:../libraries/Switch/bios.S **** 	out 	_SFR_IO_ADDR(OCR2), TEMPL
 208               	
 209:../libraries/Switch/bios.S **** 	cbi		_SFR_IO_ADDR(DDRC), 3
 210:../libraries/Switch/bios.S **** 	cbi		_SFR_IO_ADDR(PORTC), 3
 211               	
 212:../libraries/Switch/bios.S **** 	rcall	clearSegments
 213               	
 214:../libraries/Switch/bios.S **** 	ldd		TEMPH, Z + 15
 215:../libraries/Switch/bios.S **** 	in		TEMPL, _SFR_IO_ADDR(PINC)
 216:../libraries/Switch/bios.S **** 	andi	TEMPL, (1 << PC3)
 217:../libraries/Switch/bios.S **** 	lsr		TEMPL
 218:../libraries/Switch/bios.S **** 	lsr		TEMPL
 219:../libraries/Switch/bios.S **** 	ori		TEMPL, (1 << 5)
 220:../libraries/Switch/bios.S **** 	rcall	debounce
 221:../libraries/Switch/bios.S **** 	std		Z + 15, TEMPH
 222               	
 223:../libraries/Switch/bios.S **** 	ldd		TEMPH, Z + 16
 224:../libraries/Switch/bios.S **** 	ldd		TEMPL, Z + 3
 225:../libraries/Switch/bios.S **** 	sbrc	TEMPH, 5
 226:../libraries/Switch/bios.S **** 	ldd		TEMPL, Z + 7
 227:../libraries/Switch/bios.S **** 	rcall	setSegments
 228               	
 229:../libraries/Switch/bios.S **** 	sbi		_SFR_IO_ADDR(PORTC), 3
 230:../libraries/Switch/bios.S **** 	sbi		_SFR_IO_ADDR(DDRC), 3
 231               	
 232               	
 233               	periodicUpdateDone:
 234:../libraries/Switch/bios.S **** 	pop		TEMPL
 235:../libraries/Switch/bios.S **** 	out		_SFR_IO_ADDR(SREG), TEMPL
 236:../libraries/Switch/bios.S **** 	pop		ZH
 237:../libraries/Switch/bios.S **** 	pop		ZL
 238:../libraries/Switch/bios.S **** 	pop		TEMPH
 239:../libraries/Switch/bios.S **** 	pop		TEMPL
 240:../libraries/Switch/bios.S **** 	reti
 241               	
 242               	
 243               	; state of button in TEMPL, zero if released
 244               	; debounce counter in TEMPH
 245               	debounce:
 246:../libraries/Switch/bios.S **** 	swap	TEMPL
 247:../libraries/Switch/bios.S **** 	cpi		TEMPL, 0X10
 248:../libraries/Switch/bios.S **** 	brlo	debounceNoPress
 249               	
 250               	debounceIncrement:
 251:../libraries/Switch/bios.S **** 	sbrs	TEMPH, 7
 252:../libraries/Switch/bios.S **** 	inc		TEMPH
 253:../libraries/Switch/bios.S **** 	sbrc	TEMPH, 7
 254:../libraries/Switch/bios.S **** 	dec		TEMPH
 255:../libraries/Switch/bios.S **** 	cpi		TEMPH, -kLongPressTime
 256:../libraries/Switch/bios.S **** 	brlt	debounceLongKey	
 257:../libraries/Switch/bios.S **** 	cpi 	TEMPH, kLongPressTime
 258:../libraries/Switch/bios.S **** 	brge	debounceLongKey
 259:../libraries/Switch/bios.S **** 	ret
 260               	
 261               	debounceLongKey:
 262:../libraries/Switch/bios.S **** 	ldd		TEMPH, Z + 12
 263:../libraries/Switch/bios.S **** 	andi	TEMPL, 0xF0
 264:../libraries/Switch/bios.S **** 	or		TEMPH, TEMPL
 265:../libraries/Switch/bios.S **** 	std		Z + 12, TEMPH
 266:../libraries/Switch/bios.S **** 	ldi		TEMPH, -1
 267:../libraries/Switch/bios.S **** 	ret
 268               		
 269               	debounceNoPress:
 270:../libraries/Switch/bios.S **** 	cpi		TEMPH, kShortPressTime
 271:../libraries/Switch/bios.S **** 	brlt	debounceNoKey	
 272               	
 273               	debounceShortKey:
 274:../libraries/Switch/bios.S **** 	ldd		TEMPH, Z + 12
 275:../libraries/Switch/bios.S **** 	or		TEMPH, TEMPL
 276:../libraries/Switch/bios.S **** 	std		Z + 12, TEMPH
 277               	
 278               	debounceNoKey:
 279:../libraries/Switch/bios.S **** 	clr		TEMPH
 280:../libraries/Switch/bios.S **** 	ret
 281               		
 282               	
 283               	; clear the segment outputs
 284               	clearSegments:
 285:../libraries/Switch/bios.S **** 	ldi		TEMPL, 0
 286               	
 287               	
 288               	; set up segment outputs to match the pattern provided in TEMPL
 289               	setSegments:
 290               		; transpose port b bits
 291               	
 292:../libraries/Switch/bios.S **** 	sbrs	TEMPL, 0
 293:../libraries/Switch/bios.S **** 	sbi		_SFR_IO_ADDR(PORTB), 5
 294:../libraries/Switch/bios.S **** 	sbrc	TEMPL, 0
 295:../libraries/Switch/bios.S **** 	cbi		_SFR_IO_ADDR(PORTB), 5
 296               	
 297:../libraries/Switch/bios.S **** 	sbrs	TEMPL, 3
 298:../libraries/Switch/bios.S **** 	sbi		_SFR_IO_ADDR(PORTB), 4
 299:../libraries/Switch/bios.S **** 	sbrc	TEMPL, 3
 300:../libraries/Switch/bios.S **** 	cbi		_SFR_IO_ADDR(PORTB), 4
 301               	
 302:../libraries/Switch/bios.S **** 	sbrs	TEMPL, 4
 303:../libraries/Switch/bios.S **** 	sbi		_SFR_IO_ADDR(PORTB), 3
 304:../libraries/Switch/bios.S **** 	sbrc	TEMPL, 4
 305:../libraries/Switch/bios.S **** 	cbi		_SFR_IO_ADDR(PORTB), 3
 306               	
 307:../libraries/Switch/bios.S **** 	sbrs	TEMPL, 7
 308:../libraries/Switch/bios.S **** 	sbi		_SFR_IO_ADDR(PORTB), 0
 309:../libraries/Switch/bios.S **** 	sbrc	TEMPL, 7
 310:../libraries/Switch/bios.S **** 	cbi		_SFR_IO_ADDR(PORTB), 0
 311               	
 312               		; transpose port d bits
 313               	
 314:../libraries/Switch/bios.S **** 	sbrs	TEMPL, 1
 315:../libraries/Switch/bios.S **** 	sbi		_SFR_IO_ADDR(PORTD), 5
 316:../libraries/Switch/bios.S **** 	sbrc	TEMPL, 1
 317:../libraries/Switch/bios.S **** 	cbi		_SFR_IO_ADDR(PORTD), 5
 318               	
 319:../libraries/Switch/bios.S **** 	sbrs	TEMPL, 2
 320:../libraries/Switch/bios.S **** 	sbi		_SFR_IO_ADDR(PORTD), 4
 321:../libraries/Switch/bios.S **** 	sbrc	TEMPL, 2
 322:../libraries/Switch/bios.S **** 	cbi		_SFR_IO_ADDR(PORTD), 4
 323               	
 324:../libraries/Switch/bios.S **** 	sbrs	TEMPL, 5
 325:../libraries/Switch/bios.S **** 	sbi		_SFR_IO_ADDR(PORTD), 6
 326:../libraries/Switch/bios.S **** 	sbrc	TEMPL, 5
 327:../libraries/Switch/bios.S **** 	cbi		_SFR_IO_ADDR(PORTD), 6
 328               	
 329:../libraries/Switch/bios.S **** 	sbrs	TEMPL, 6
 330:../libraries/Switch/bios.S **** 	sbi		_SFR_IO_ADDR(PORTD), 7
 331:../libraries/Switch/bios.S **** 	sbrc	TEMPL, 6
 332:../libraries/Switch/bios.S **** 	cbi		_SFR_IO_ADDR(PORTD), 7
 333               	
 334               		; set segment pins as outputs
 335:../libraries/Switch/bios.S **** 	in 		TEMPL, _SFR_IO_ADDR(DDRB)
 336:../libraries/Switch/bios.S **** 	ori		TEMPL, PORTBSEGMENTMASK
 337:../libraries/Switch/bios.S **** 	out 	_SFR_IO_ADDR(DDRB), TEMPL
 338:../libraries/Switch/bios.S **** 	in 		TEMPL, _SFR_IO_ADDR(DDRD)
 339:../libraries/Switch/bios.S **** 	ori		TEMPL, PORTDSEGMENTMASK
 340:../libraries/Switch/bios.S **** 	out 	_SFR_IO_ADDR(DDRD), TEMPL
 341               	
 342:../libraries/Switch/bios.S **** 	ret
DEFINED SYMBOLS
                             .bss:0000000000000000 bios_segment
../libraries/Switch/bios.S:15     .bss:0000000000000008 bios_seconds
../libraries/Switch/bios.S:16     .bss:0000000000000009 bios_minutes
../libraries/Switch/bios.S:17     .bss:000000000000000a bios_hours
../libraries/Switch/bios.S:18     .bss:000000000000000b bios_days
../libraries/Switch/bios.S:19     .bss:000000000000000c key
../libraries/Switch/bios.S:20     .bss:0000000000000010 bios_ticks
../libraries/Switch/bios.S:37     .text:0000000000000000 bios_init
../libraries/Switch/bios.S:63     .text:0000000000000024 bios_getKey
../libraries/Switch/bios.S:72     .text:0000000000000034 __vector_3
../libraries/Switch/bios.S:80     .text:0000000000000040 periodicUpdate
../libraries/Switch/bios.S:85     .text:0000000000000044 tickUpdate
../libraries/Switch/bios.S:90     .text:000000000000004c seconds
../libraries/Switch/bios.S:117    .text:0000000000000078 displayUpdate
../libraries/Switch/bios.S:96     .text:0000000000000056 minutes
../libraries/Switch/bios.S:104    .text:0000000000000064 hours
../libraries/Switch/bios.S:112    .text:0000000000000072 days
../libraries/Switch/bios.S:171    .text:00000000000000c0 digitThree
../libraries/Switch/bios.S:122    .text:000000000000007e digitOne
../libraries/Switch/bios.S:154    .text:00000000000000aa digitTwo
../libraries/Switch/bios.S:284    .text:0000000000000156 clearSegments
../libraries/Switch/bios.S:245    .text:0000000000000124 debounce
../libraries/Switch/bios.S:289    .text:0000000000000158 setSegments
../libraries/Switch/bios.S:233    .text:0000000000000116 periodicUpdateDone
../libraries/Switch/bios.S:203    .text:00000000000000ec digitFour
../libraries/Switch/bios.S:269    .text:0000000000000148 debounceNoPress
../libraries/Switch/bios.S:250    .text:000000000000012a debounceIncrement
../libraries/Switch/bios.S:261    .text:000000000000013c debounceLongKey
../libraries/Switch/bios.S:278    .text:0000000000000152 debounceNoKey
../libraries/Switch/bios.S:273    .text:000000000000014c debounceShortKey

NO UNDEFINED SYMBOLS
